{"ast":null,"code":"import _classCallCheck from \"/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/src/components/Game/Game.js\";\nimport React, { Component } from 'react';\nimport Player from '../Player/Player';\nimport Dice from '../Dice/Dice';\nimport Msg from '../Msg/Msg';\nimport './Game.css';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dice: 0,\n      matchScore: 0,\n      activePlayer: 1,\n      winScore: 50,\n      players: [{\n        playerNumber: 1,\n        playerMatchScore: 0,\n        playerGameScore: 0,\n        activeClass: 'active-player'\n      }, {\n        playerNumber: 2,\n        playerMatchScore: 0,\n        playerGameScore: 0,\n        activeClass: ''\n      }],\n      game: true,\n      diceClasses: 'cube',\n      msgDisplayClass: '',\n      diceBounc: '',\n      winner: null,\n      playAgain: '',\n      mouseMoveX: 'none',\n      mouseMoveY: 'none'\n    };\n\n    _this.activePlayerHandler = function () {\n      // Get players array from the stete\n      var players = _this.state.players;\n\n      if (_this.state.activePlayer === 1) {\n        players[_this.state.activePlayer - 1].activeClass = '';\n        players[_this.state.activePlayer].activeClass = 'active-player';\n      } else {\n        players[_this.state.activePlayer - 2].activeClass = 'active-player';\n        players[_this.state.activePlayer - 1].activeClass = '';\n      }\n    };\n\n    _this.rollTheDiceHandler = function () {\n      // Check if the game is false or true and allow or refuse game play\n      if (_this.state.game) {\n        // clear the cube classlist from previous changes\n        _this.setState({\n          diceClasses: 'cube'\n        }); // Generate random number 1-6\n\n\n        var diceNumber = Math.floor(Math.random() * 6 + 1); // Add the animation to the dice on roll button click\n\n        if (diceNumber === 2) {\n          _this.setState({\n            diceClasses: 'cube show-back'\n          });\n        } else if (diceNumber === 3) {\n          _this.setState({\n            diceClasses: 'cube show-right'\n          });\n        } else if (diceNumber === 4) {\n          _this.setState({\n            diceClasses: 'cube show-left'\n          });\n        } else if (diceNumber === 5) {\n          _this.setState({\n            diceClasses: 'cube show-top'\n          });\n        } else if (diceNumber === 6) {\n          _this.setState({\n            diceClasses: 'cube show-bottom'\n          });\n        } // Get players array from the stete\n\n\n        var players = _this.state.players; // Check the dive value if its 1 than call handler to change the active player, else add up points for match score\n\n        if (diceNumber === 1) {\n          _this.singleClickButtonHandler(); // Add the display class to the msg component so that the message would show that 1 was rolled\n\n\n          _this.setState({\n            msgDisplayClass: 'DisplayRoll'\n          });\n\n          setTimeout(function () {\n            _this.setState({\n              msgDisplayClass: ''\n            });\n          }, 1000); // Call handler to change the active player\n\n          _this.changePlayerHandler(); // Call handler to change the DOM of an active player\n\n\n          _this.activePlayerHandler();\n        } else {\n          // Set the dice value inside the state;\n          _this.setState({\n            dice: diceNumber,\n            matchScore: diceNumber === 1 ? 0 : _this.state.matchScore + diceNumber\n          }); // Display the match score of an active player\n\n\n          players[_this.state.activePlayer - 1].playerMatchScore = _this.state.matchScore + diceNumber;\n        } // If rolled the same dice number twice put effect on a dice to show that\n\n\n        var oldDice = _this.state.dice;\n\n        if (oldDice === diceNumber) {\n          _this.setState({\n            diceBounc: 'bounc'\n          });\n\n          setTimeout(function () {\n            _this.setState({\n              diceBounc: ''\n            });\n          }, 700);\n        }\n      }\n    };\n\n    _this.saveGameScore = function () {\n      if (_this.state.game) {\n        var activePlayer = document.querySelector(\".P-\".concat(_this.state.activePlayer, \"-gameScore\"));\n        var currentGameScore = activePlayer.innerHTML;\n        var players = _this.state.players;\n        players[_this.state.activePlayer - 1].playerGameScore = +currentGameScore + _this.state.matchScore; // Check if the game score of an active player is winning or not\n\n        if (players[_this.state.activePlayer - 1].playerGameScore >= _this.state.winScore) {\n          // Display the msg with the winner of the game\n          _this.setState({\n            winner: \"Player \".concat(players[_this.state.activePlayer - 1].playerNumber, \" has won the game!\")\n          }); // Display Play Again button\n\n\n          _this.setState({\n            playAgain: 'playAgain'\n          }); // Stop game after the winning score was reached\n\n\n          _this.setState({\n            game: false\n          });\n        } // Call handler to change the active player\n\n\n        _this.changePlayerHandler(); // Call handler to change the DOM of an active player\n\n\n        _this.activePlayerHandler();\n      }\n    };\n\n    _this.changePlayerHandler = function () {\n      _this.setState({\n        dice: 0,\n        matchScore: 0,\n        activePlayer: _this.state.activePlayer === 1 ? 2 : 1\n      });\n\n      var players = _this.state.players;\n      players[_this.state.activePlayer - 1].playerMatchScore = 0;\n    };\n\n    _this.singleClickButtonHandler = function () {\n      _this.refs.btnRoll.setAttribute(\"disabled\", \"disabled\");\n\n      setTimeout(function () {\n        _this.refs.btnRoll.removeAttribute(\"disabled\");\n      }, 1000);\n    };\n\n    _this.btnClickEventsHandler = function () {\n      _this.singleClickButtonHandler();\n\n      _this.rollTheDiceHandler();\n    };\n\n    _this.btnPlayAgainHandler = function () {\n      _this.setState({\n        dice: 0,\n        matchScore: 0,\n        activePlayer: 1,\n        players: [{\n          playerNumber: 1,\n          playerMatchScore: 0,\n          playerGameScore: 0,\n          activeClass: 'active-player'\n        }, {\n          playerNumber: 2,\n          playerMatchScore: 0,\n          playerGameScore: 0,\n          activeClass: ''\n        }],\n        diceClasses: 'cube',\n        game: true,\n        winner: null,\n        playAgain: ''\n      });\n    };\n\n    _this.mouseMoveHandler = function (e) {\n      var x = e.clientX / 100;\n      var y = e.clientY / 100;\n\n      if (x < 6) {\n        x = -(6 - x) - 0.8;\n      } else {\n        x = x - 5;\n      }\n\n      if (y < 6) {\n        y = -(6 - y) - 0.8;\n      } else {\n        y = y - 5 + 1.8;\n      }\n\n      _this.setState({\n        mouseMoveX: x.toFixed(1),\n        mouseMoveY: y.toFixed(1)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Updating the match score DOM of an active player\n      var activePlayer = document.querySelector(\".P-\".concat(this.state.activePlayer, \"-matchScore\"));\n      activePlayer.innerHTML = this.state.players[this.state.activePlayer - 1].playerMatchScore;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var players = this.state.players;\n      return React.createElement(\"div\", {\n        onMouseMove: this.mouseMoveHandler,\n        style: {\n          transform: \"rotateY(\".concat(this.state.mouseMoveX, \"deg) rotateX(\").concat(this.state.mouseMoveY, \"deg)\")\n        },\n        className: \"Game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Msg, {\n        displayClass: this.state.msgDisplayClass,\n        theMsg: \"Rolled ONE!\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"score-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, this.state.dice), React.createElement(\"button\", {\n        className: \"btn btn-roll\",\n        ref: \"btnRoll\",\n        onClick: this.btnClickEventsHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Roll\"), React.createElement(\"button\", {\n        className: \"btn btn-save\",\n        onClick: this.saveGameScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Save\")), React.createElement(\"div\", {\n        className: \"Players\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"winScore-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Win Score\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, this.state.winScore)), players.map(function (player) {\n        return React.createElement(Player, {\n          activePlayerClass: player.activeClass,\n          activePlayerNumber: _this2.state.activePlayer,\n          key: player.playerNumber,\n          playerNr: player.playerNumber,\n          playerMatchScore: player.playerMatchScore,\n          playerGameScore: player.playerGameScore,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        });\n      })), React.createElement(Dice, {\n        diceClasses: this.state.diceClasses,\n        bouncEffect: this.state.diceBounc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"msg-play-again\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, this.state.winner), React.createElement(\"button\", {\n        onClick: this.btnPlayAgainHandler,\n        className: \"btn btnPlayAgain \" + this.state.playAgain,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Play again\"));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/rob/Desktop/MyScript/MyProjects/React.DiceGame/src/components/Game/Game.js"],"names":["React","Component","Player","Dice","Msg","Game","state","dice","matchScore","activePlayer","winScore","players","playerNumber","playerMatchScore","playerGameScore","activeClass","game","diceClasses","msgDisplayClass","diceBounc","winner","playAgain","mouseMoveX","mouseMoveY","activePlayerHandler","rollTheDiceHandler","setState","diceNumber","Math","floor","random","singleClickButtonHandler","setTimeout","changePlayerHandler","oldDice","saveGameScore","document","querySelector","currentGameScore","innerHTML","refs","btnRoll","setAttribute","removeAttribute","btnClickEventsHandler","btnPlayAgainHandler","mouseMoveHandler","e","x","clientX","y","clientY","toFixed","transform","map","player"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Player from '../Player/Player';\nimport Dice from '../Dice/Dice';\nimport Msg from '../Msg/Msg';\nimport './Game.css';\n\n\nclass Game extends Component {\n    state = {\n        dice: 0,\n        matchScore: 0,\n        activePlayer: 1,\n        winScore: 50,\n        players: [\n            {playerNumber: 1, playerMatchScore: 0, playerGameScore: 0, activeClass:'active-player'},\n            {playerNumber: 2, playerMatchScore: 0, playerGameScore: 0, activeClass:''}\n        ],\n        game: true,\n        diceClasses: 'cube',\n        msgDisplayClass: '',\n        diceBounc: '',\n        winner: null,\n        playAgain: '',\n        mouseMoveX: 'none',\n        mouseMoveY: 'none'\n    }\n\n    activePlayerHandler = () => {\n        // Get players array from the stete\n        const players = this.state.players;\n\n        if(this.state.activePlayer === 1){\n            players[this.state.activePlayer - 1].activeClass = '';\n            players[this.state.activePlayer].activeClass = 'active-player';\n        } else {\n            players[this.state.activePlayer - 2].activeClass = 'active-player';\n            players[this.state.activePlayer - 1].activeClass = '';\n        }\n    }\n\n    componentDidUpdate () {\n        // Updating the match score DOM of an active player\n        const activePlayer = document.querySelector(`.P-${this.state.activePlayer}-matchScore`);\n        activePlayer.innerHTML = this.state.players[this.state.activePlayer - 1].playerMatchScore;\n    }\n\n    rollTheDiceHandler = () => {\n        // Check if the game is false or true and allow or refuse game play\n        if(this.state.game){\n            // clear the cube classlist from previous changes\n            this.setState({diceClasses: 'cube'})\n                // Generate random number 1-6\n            const diceNumber = Math.floor((Math.random() * 6 + 1));\n\n            // Add the animation to the dice on roll button click\n            if(diceNumber === 2) {\n                this.setState({diceClasses: 'cube show-back'})\n            } else if (diceNumber === 3){\n                this.setState({diceClasses: 'cube show-right'})\n            } else if (diceNumber === 4){\n                this.setState({diceClasses: 'cube show-left'})\n            } else if (diceNumber === 5){\n                this.setState({diceClasses: 'cube show-top'})\n            } else if (diceNumber === 6){\n                this.setState({diceClasses: 'cube show-bottom'})\n            }\n\n            // Get players array from the stete\n            const players = this.state.players;\n            // Check the dive value if its 1 than call handler to change the active player, else add up points for match score\n            if (diceNumber === 1) {\n                this.singleClickButtonHandler();\n                // Add the display class to the msg component so that the message would show that 1 was rolled\n                this.setState({msgDisplayClass: 'DisplayRoll'});\n                setTimeout(()=> {\n                    this.setState({msgDisplayClass: ''});\n                }, 1000);\n                // Call handler to change the active player\n                this.changePlayerHandler();\n                // Call handler to change the DOM of an active player\n                this.activePlayerHandler();\n            } else {\n                // Set the dice value inside the state;\n                this.setState({\n                    dice: diceNumber,\n                    matchScore: diceNumber === 1 ? 0 : this.state.matchScore + diceNumber\n                });\n                \n                // Display the match score of an active player\n                players[this.state.activePlayer - 1].playerMatchScore = this.state.matchScore + diceNumber;\n            }\n\n            // If rolled the same dice number twice put effect on a dice to show that\n            const oldDice = this.state.dice;\n            if(oldDice === diceNumber){\n                this.setState({diceBounc: 'bounc'})\n                setTimeout(() => {\n                    this.setState({diceBounc: ''})\n                }, 700);\n            }   \n        }\n    }\n\n    saveGameScore = () => {\n        if(this.state.game){\n            const activePlayer = document.querySelector(`.P-${this.state.activePlayer}-gameScore`);\n            const currentGameScore = activePlayer.innerHTML;\n\n            const players = this.state.players;\n            players[this.state.activePlayer - 1].playerGameScore = +currentGameScore + this.state.matchScore;\n\n            // Check if the game score of an active player is winning or not\n            if(players[this.state.activePlayer - 1].playerGameScore >= this.state.winScore){\n\n                // Display the msg with the winner of the game\n                this.setState({winner: `Player ${players[this.state.activePlayer - 1].playerNumber} has won the game!`});\n                // Display Play Again button\n                this.setState({playAgain: 'playAgain'});\n\n                // Stop game after the winning score was reached\n                this.setState({game: false});\n            }\n\n            // Call handler to change the active player\n            this.changePlayerHandler();\n            // Call handler to change the DOM of an active player\n            this.activePlayerHandler();\n        }\n    }\n\n    changePlayerHandler = () => {\n        this.setState({\n            dice: 0,\n            matchScore: 0,\n            activePlayer: this.state.activePlayer === 1 ? 2 : 1,\n        });\n\n        const players = this.state.players;\n        players[this.state.activePlayer - 1].playerMatchScore = 0;\n    }\n\n    // Disable button Roll after click for short time to prevent multiple clicks\n    singleClickButtonHandler = () => {\n        this.refs.btnRoll.setAttribute(\"disabled\", \"disabled\");\n        setTimeout(( ) => {\n            this.refs.btnRoll.removeAttribute(\"disabled\");\n        }, 1000);\n    }\n\n    // Call multiple events on one btn click\n    btnClickEventsHandler = () => {\n        this.singleClickButtonHandler();\n        this.rollTheDiceHandler();\n    }\n\n    // Play Again button reset the game\n    btnPlayAgainHandler = () => {\n        this.setState({\n            dice: 0,\n            matchScore: 0,\n            activePlayer: 1,\n            players: [\n                {playerNumber: 1, playerMatchScore: 0, playerGameScore: 0, activeClass:'active-player'},\n                {playerNumber: 2, playerMatchScore: 0, playerGameScore: 0, activeClass:''}\n            ],\n            diceClasses: 'cube',\n            game: true,\n            winner: null,\n            playAgain: ''\n        })\n    }\n\n    // THE MOUSE MOVE ROTATE GAME DIV FUNCTION\n    mouseMoveHandler = (e) => {\n        let x = e.clientX / 100;\n        let y = e.clientY / 100;\n        if(x < 6){\n            x = (-(6 - x)) - 0.8;\n        } else {\n            x = x - 5;\n        }\n        if(y < 6){\n            y = (-(6 - y)) - 0.8;\n        } else {\n            y = (y - 5) + 1.8;\n        }\n        this.setState({mouseMoveX: x.toFixed(1), mouseMoveY: y.toFixed(1)});\n\n    }\n\n    render () {\n        const players = this.state.players;\n\n        return (\n            \n            <div\n                onMouseMove={this.mouseMoveHandler} \n                style={{transform: `rotateY(${this.state.mouseMoveX}deg) rotateX(${this.state.mouseMoveY}deg)`}}\n                className='Game'>\n            <Msg displayClass={this.state.msgDisplayClass} theMsg='Rolled ONE!'/>\n                <div className=\"score-container\">\n                    <p className=\"score\">{this.state.dice}</p>\n                    <button \n                        className='btn btn-roll'\n                        ref='btnRoll' \n                        onClick={this.btnClickEventsHandler}>Roll</button>\n                    <button \n                        className='btn btn-save'\n                        onClick={this.saveGameScore}>Save</button>\n                </div>\n                <div className='Players'>\n                <div className='winScore-container'> \n                    <p >Win Score</p>\n                    <p >{this.state.winScore}</p>\n                </div>\n                    {players.map(player => {\n                        return (\n                            <Player \n                            activePlayerClass={player.activeClass}\n                            activePlayerNumber={this.state.activePlayer}\n                            key={player.playerNumber}\n                            playerNr={player.playerNumber}\n                            playerMatchScore={player.playerMatchScore}\n                            playerGameScore={player.playerGameScore}/>\n                        )\n                    })}\n                </div>\n                <Dice diceClasses={this.state.diceClasses} bouncEffect={this.state.diceBounc}/>\n                <h1 className='msg-play-again'>{this.state.winner}</h1>\n                <button onClick={this.btnPlayAgainHandler} className={`btn btnPlayAgain ` + this.state.playAgain}>Play again</button>\n            </div>\n        )\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}